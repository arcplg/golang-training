// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: internal/handlers/chat_app.proto

package handlers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatAppService_RegisterUser_FullMethodName       = "/internal.ChatAppService/RegisterUser"
	ChatAppService_LoginUser_FullMethodName          = "/internal.ChatAppService/LoginUser"
	ChatAppService_CreateRoom_FullMethodName         = "/internal.ChatAppService/CreateRoom"
	ChatAppService_JoinRoom_FullMethodName           = "/internal.ChatAppService/JoinRoom"
	ChatAppService_ChatStream_FullMethodName         = "/internal.ChatAppService/ChatStream"
	ChatAppService_ChatWithUserStream_FullMethodName = "/internal.ChatAppService/ChatWithUserStream"
)

// ChatAppServiceClient is the client API for ChatAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatAppServiceClient interface {
	RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error)
	ChatStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error)
	ChatWithUserStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatWithUserMessage, ChatWithUserMessage], error)
}

type chatAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatAppServiceClient(cc grpc.ClientConnInterface) ChatAppServiceClient {
	return &chatAppServiceClient{cc}
}

func (c *chatAppServiceClient) RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, ChatAppService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAppServiceClient) LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, ChatAppService_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAppServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, ChatAppService_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAppServiceClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRoomResponse)
	err := c.cc.Invoke(ctx, ChatAppService_JoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAppServiceClient) ChatStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatAppService_ServiceDesc.Streams[0], ChatAppService_ChatStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatAppService_ChatStreamClient = grpc.BidiStreamingClient[ChatMessage, ChatMessage]

func (c *chatAppServiceClient) ChatWithUserStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatWithUserMessage, ChatWithUserMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatAppService_ServiceDesc.Streams[1], ChatAppService_ChatWithUserStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatWithUserMessage, ChatWithUserMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatAppService_ChatWithUserStreamClient = grpc.BidiStreamingClient[ChatWithUserMessage, ChatWithUserMessage]

// ChatAppServiceServer is the server API for ChatAppService service.
// All implementations must embed UnimplementedChatAppServiceServer
// for forward compatibility.
type ChatAppServiceServer interface {
	RegisterUser(context.Context, *RegisterRequest) (*RegisterResponse, error)
	LoginUser(context.Context, *LoginRequest) (*LoginResponse, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error)
	ChatStream(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error
	ChatWithUserStream(grpc.BidiStreamingServer[ChatWithUserMessage, ChatWithUserMessage]) error
	mustEmbedUnimplementedChatAppServiceServer()
}

// UnimplementedChatAppServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatAppServiceServer struct{}

func (UnimplementedChatAppServiceServer) RegisterUser(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedChatAppServiceServer) LoginUser(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedChatAppServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedChatAppServiceServer) JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedChatAppServiceServer) ChatStream(grpc.BidiStreamingServer[ChatMessage, ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ChatStream not implemented")
}
func (UnimplementedChatAppServiceServer) ChatWithUserStream(grpc.BidiStreamingServer[ChatWithUserMessage, ChatWithUserMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ChatWithUserStream not implemented")
}
func (UnimplementedChatAppServiceServer) mustEmbedUnimplementedChatAppServiceServer() {}
func (UnimplementedChatAppServiceServer) testEmbeddedByValue()                        {}

// UnsafeChatAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatAppServiceServer will
// result in compilation errors.
type UnsafeChatAppServiceServer interface {
	mustEmbedUnimplementedChatAppServiceServer()
}

func RegisterChatAppServiceServer(s grpc.ServiceRegistrar, srv ChatAppServiceServer) {
	// If the following call pancis, it indicates UnimplementedChatAppServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatAppService_ServiceDesc, srv)
}

func _ChatAppService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatAppService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServiceServer).RegisterUser(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAppService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatAppService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServiceServer).LoginUser(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAppService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatAppService_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAppService_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServiceServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatAppService_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServiceServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAppService_ChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatAppServiceServer).ChatStream(&grpc.GenericServerStream[ChatMessage, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatAppService_ChatStreamServer = grpc.BidiStreamingServer[ChatMessage, ChatMessage]

func _ChatAppService_ChatWithUserStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatAppServiceServer).ChatWithUserStream(&grpc.GenericServerStream[ChatWithUserMessage, ChatWithUserMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatAppService_ChatWithUserStreamServer = grpc.BidiStreamingServer[ChatWithUserMessage, ChatWithUserMessage]

// ChatAppService_ServiceDesc is the grpc.ServiceDesc for ChatAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal.ChatAppService",
	HandlerType: (*ChatAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _ChatAppService_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _ChatAppService_LoginUser_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _ChatAppService_CreateRoom_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _ChatAppService_JoinRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatStream",
			Handler:       _ChatAppService_ChatStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ChatWithUserStream",
			Handler:       _ChatAppService_ChatWithUserStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/handlers/chat_app.proto",
}
